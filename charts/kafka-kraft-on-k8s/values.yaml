global:
  labels: {}
  annotations: {}
  notes:
    enabled: true


#
# Warning:  ! ENVs are mandatory and hard defined in the entrypoint.sh on image build level.
#


# --------------------------------------------------------------------------------------------------------------------------------------- #
# Kafka KRaft
#
# See: https://kafka.apache.org/documentation/#kafkakraft
# --------------------------------------------------------------------------------------------------------------------------------------- #

kafka:
  enabled: true

  env:
    PROCESS_ROLES: 'broker' # Must be equal to either 'broker' OR 'broker, controller'. # broker node.ids = {id + 3}, empty == ZooKeeper mode NOT integrated
    REPLICAS: &kafka_replicas 3
    SERVICE: &service kafka-svc
    CONTROLLER_SERVICE: &controller-service controller-svc
    CONTROLLER_REPLICAS: *kafka_replicas
    CONTROLLER_LISTENER_NAMES: &controller-listener-names CONTROLLER
    CONTROLLER_LISTENER_SECURITY_PROTOCOL_MAP: &controller-listener-security-protocol-map CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,JMX:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
    INTER_BROKER_LISTENER_NAME: &inter-broker-listener-name PLAINTEXT
    NAMESPACE: &namespace kafka-test
    SHARE_DIR: /mnt/kafka
    # $ kafka-storage.sh random-uuid # 16 bytes
    # see docs: https://kafka.apache.org/33/documentation.html#quickstart_startserver
    CLUSTER_ID: &clusterid QwjfU6MPQ_CMdFsbCx7EGg
    DEFAULT_REPLICATION_FACTOR: '3'
    DEFAULT_MIN_INSYNC_REPLICAS: '2'
    KAFKA_NUM_PARTITIONS: '8'
    AUTO_CREATE_TOPICS_ENABLE: 'true'
    DEBUG: 'false'

  name: kafka
  namespace: *namespace
  labels:
    app: &label kafkakraft
  image:
    repository: kafkakraft/kafkakraft
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: &tag "3.6.1"
  imagePullSecrets: []
  container:
    name: kafka-container

  affinity: {}

  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  hpa:
    enabled: false
    minReplicas: 3
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 70
    metrics:
      - type: Resource
        resource:
          name: cpu
          targetAverageUtilization: 50
      - type: Pods
        pods:
          metricName: http_requests
          targetAverageValue: 100

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # nameOverride can be set to override the name
  # of the Helm release during a chart deployment
  nameOverride: ""

  # nodeSelector can be set to override the node selection
  nodeSelector: {}

  # ports for the pods and service
  ports:
    # Kafka port for data streaming
    - name: kafka
      port: 9092
    # Controller port
    - name: controller
      port: 9093
    # Prometheus port for JMX metrics
    - name: prometheus
      port: 9000

  # the below `replicaCount` represents
  # the number of replicas in the StatefulSet
  replicaCount: *kafka_replicas

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # mandatory hardening - must be set to disable root user in the container
  # kafka is running as user kafka (1001:1001)
  securityContext:
    runAsNonRoot: true
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

  # Service definition with labels and JMX metrics annotations
  #
  # The following is an example of a service definition.
  service:
    name: *service
    labels:
      app: *service
    #  Annotations to add to the service
    #  e.g. to enable JMX metrics via Prometheus
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9000"
    type: ClusterIP
    selector:
      app: *label

  # Specifies whether a service account should be created
  serviceAccount:
    create: false
    name: "kafka-sa"
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    labels:
      app: *service

  rbac:
    create: false
    # Whether to create & use RBAC resources or not
    # binding Kafka ServiceAccount to a role
    # that allows Kafka pods querying the K8s API
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kafka-rbac"
    apiGroups:
      - "stable.example.com"
    resources:
      - "service"
      - "pods"
    verbs:
      - get
      - list
      - watch

  tolerations: []
    # - effect: NoSchedule
    #   key: node-role.kubernetes.io/master
    #   operator: Exists
    # - effect: NoSchedule
    #   key: node-role.kubernetes.io/control-plane
    #   operator: Exists

  # volumeMounts to persist Kafka Data
  volumeMounts:
    - name: &volumename kafka-storage-data
      mountPath: /mnt/kafka

  # volumeClaimTemplates for the volumeMounts
  volumeClaimTemplates:
    - name: *volumename
      accessModes: ReadWriteOnce
      storage: 100Gi
      # resources:
      #   requests:
      #     storage: 100Gi


# --------------------------------------------------------------------------------------------------------------------------------------- #
# Kafka Controller
#
# see https://kafka.apache.org/documentation/#kraft
# --------------------------------------------------------------------------------------------------------------------------------------- #

controller:
  enabled: true

  env:
    PROCESS_ROLES: controller #! Should be always 'controller'. DonÂ´t change that until you know what you do.
    CONTROLLER_REPLICAS: *kafka_replicas # matches the replicaCount of Kafka
    SERVICE: *service
    CONTROLLER_SERVICE: *controller-service
    CONTROLLER_LISTENER_NAMES: *controller-listener-names
    CONTROLLER_LISTENER_SECURITY_PROTOCOL_MAP: *controller-listener-security-protocol-map
    NAMESPACE: *namespace
    SHARE_DIR: /mnt/kafka
    CLUSTER_ID: *clusterid
    DEBUG: false

  name: controller
  namespace: *namespace
  labels:
    app: &controller-label controller
  image:
    repository: kafkakraft/kafka-controller
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: *tag
  imagePullSecrets: []
  container:
    name: controller-container

  # nameOverride can be set to override the name
  # of the Helm release during a chart deployment
  nameOverride: ""

  # nodeSelector can be set to override the node selection
  nodeSelector: {}

  # ports for the pods and service
  ports:
    # Controller port
    - name: controller
      port: 9093
    # Prometheus port for JMX metrics
    - name: prometheus
      port: 9000

  # the below `replicaCount` represents
  # the number of replicas in the StatefulSet
  replicaCount: *kafka_replicas

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # mandatory hardening - must be set to disable root user in the container
  # kafka is running as user kafka (1001:1001)
  securityContext:
    runAsNonRoot: true
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

  # Service definition with labels and JMX metrics annotations
  #
  # The following is an example of a service definition.
  service:
    name: *controller-service
    labels:
      app: *controller-service
    #  Annotations to add to the service
    #  e.g. to enable JMX metrics via Prometheus
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9000"
    type: ClusterIP
    selector:
      app: *controller-label

  # Specifies whether a service account should be created
  serviceAccount:
    create: false
    name: "controller-sa"
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    labels:
      app: *controller-service

  rbac:
    create: false
    # Whether to create & use RBAC resources or not
    # binding Kafka ServiceAccount to a role
    # that allows Kafka pods querying the K8s API
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "controller-rbac"
    apiGroups:
      - "stable.example.com"
    resources:
      - "service"
      - "pods"
    verbs:
      - get
      - list
      - watch

  tolerations: []
    # - effect: NoSchedule
    #   key: node-role.kubernetes.io/master
    #   operator: Exists
    # - effect: NoSchedule
    #   key: node-role.kubernetes.io/control-plane
    #   operator: Exists

  volumeMounts:
    - name: &volumename kafka-storage-data
      mountPath: /mnt/kafka

  # volumeClaimTemplates for the volumeMounts
  volumeClaimTemplates:
    - name: *volumename
      accessModes: ReadWriteOnce
      storage: 100Gi
      # resources:
      #   requests:
      #     storage: 100Gi


# --------------------------------------------------------------------------------------------------------------------------------------- #
# Kafka Connect
# --------------------------------------------------------------------------------------------------------------------------------------- #

connect:
  enabled: true

  env:
    REPLICAS: &connect_replicas 3
    SERVICE: *service
    SERVICE_CONNECT: &service-connect connect-svc
    NAMESPACE: *namespace
    DEBUG: 'false'
    KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    KEY_CONVERTER_SCHEMAS_ENABLE: true
    VALUE_CONVERTER_SCHEMAS_ENABLE: true
    OFFSET_STORAGE_REPLICATION_FACTOR: 3
    OFFSET_STORAGE_PARTITIONS: 25
    STATUS_STORAGE_REPLICATION_FACTOR: 3
    STATUS_STORAGE_PARTITIONS: 5
    OFFSET_STORAGE_CLEANUP_POLICY: compact
    LISTENERS: "HTTP://:8083"
    PLUGIN_PATH: "/opt/kafka/libs"

  name: connect
  namespace: *namespace
  labels:
    app: &label-connect connect
  image:
    repository: kafkakraft/kafka-connect
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: *tag
  imagePullSecrets: []
  container:
    name: connect-container

  hpa:
    enabled: false
    minReplicas: 3
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 70
    metrics:
      - type: Resource
        resource:
          name: cpu
          targetAverageUtilization: 50
      - type: Pods
        pods:
          metricName: http_requests
          targetAverageValue: 100

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # ports for the pods and service
  ports:
    # Kafka port for data streaming
    - name: connect
      port: 8083
    # Prometheus port for JMX metrics
    - name: prometheus
      port: 9000

  # the below `replicaCount` represents
  # the number of replicas in the StatefulSet
  replicaCount: *connect_replicas

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  service:
    name: *service-connect
    labels:
      app: *service-connect
    #  Annotations to add to the service
    #  e.g. to enable JMX metrics via Prometheus
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9000"
    type: ClusterIP
    selector:
      app: *label-connect

  # Specifies whether a service account should be created
  serviceAccount:
    create: false
    name: "connect-sa"
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    labels:
      app: *service-connect

  rbac:
    create: false
    # Whether to create & use RBAC resources or not
    # binding Kafka ServiceAccount to a role
    # that allows Kafka pods querying the K8s API
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "connect-rbac"
    apiGroups:
      - "stable.example.com"
    resources:
      - "service"
      - "pods"
    verbs:
      - get
      - list
      - watch
